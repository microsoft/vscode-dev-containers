{
	"features": [
		//  Problem #1 - you should be able to pick docker-in-docker or docker-from-docker, but not both, and settings need to be different
		{
			"id": "docker-in-docker",
			"name": "Docker (Moby) support (Docker-in-Docker)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "20.10" ],
					"default": "latest",
					"description": "Select or enter a Docker/Moby Engine version. (Available versions may vary by Linux distribution.)"
				},
				"moby": {
					"type": "boolean",
					"default": true,
					"description": "Install OSS Moby build instead of Docker CE"
				}
			},
			"buildArg": "_VSC_INSTALL_DOCKER_IN_DOCKER",
			"entrypoint": "/usr/local/share/docker-init.sh",
			"privileged": true,
			"init": true,
			"containerEnv": {
				"DOCKER_BUILDKIT": "1"
			},
			"extensions": [
				"ms-azuretools.vscode-docker"
			],
			// Problem #2 - The volume name here should be something unique per dev container. Need ability to either get a var that points to one or ask for a volume name
			"mounts": [
				{
					"source":"dind-var-lib-docker", 
				 	"target":"/var/lib/docker", 
				 	"type":"volume"
				}
			],
			"include": [
				"azure-cli",
				"cpp",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "docker-from-docker",
			"name": "Docker (Moby) support, reuse host Docker Engine (Docker-from-Docker)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "20.10"],
					"default": "latest",
					"description": "Select or enter a Docker/Moby CLI version. (Available versions may vary by Linux distribution.)"
				}
			},
			"buildArg": "_VSC_INSTALL_DOCKER_FROM_DOCKER",
			"entrypoint": "/usr/local/share/docker-init.sh",
			"init": true,
			"containerEnv": {
				"DOCKER_BUILDKIT": "1"
			},
			"extensions": [
				"ms-azuretools.vscode-docker"
			],
			"mounts": [
				{
					"source":"/var/run/docker.sock", 
				 	"target":"/var/run/docker-host.sock", 
				 	"type":"bind"
				}
			],
			"include": [
				"azure-cli",
				"cpp",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "kubectl-helm-minikube",
			"name": "Kubectl, Helm, and Minkube",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "1.22", "1.21", "1.20"],
					"default": "latest",
					"description": "Select or enter a Kubernetes version to install"
				},
				"helm": {
					"type": "string",
					"proposals": ["latest"],
					"default": "latest",
					"description": "Select or enter a Helm version to install"
				},
				"minikube": {
					"type": "string",
					"proposals": ["latest"],
					"default": "latest",
					"description": "Select or enter a Minikube version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_KUBECTL_HELM_MINIKUBE",
			"extensions": [
				"ms-kubernetes-tools.vscode-kubernetes-tools"
			],
			// Problem #2 - The volume name here should be something unique per dev container. Need ability to either get a var that points to one or ask for a volume name
			"mounts": [
				{
					"source":"minikube-config", 
				 	"target":"/home/vscode/.minikube", 
				 	"type":"volume"
				}
			],
			"include": [
				"azure-cli",
				"cpp",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "terraform",
			"name": "Terraform, tflint, and TFGrunt",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "1.0", "0.15"],
					"default": "latest",
					"description": "Terraform version"
				},
				"tflint": {
					"type": "string",
					"proposals": ["latest"],
					"default": "latest",
					"description": "Tflint version"
				},
				"terragrunt": {
					"type": "string",
					"proposals": ["latest"],
					"default": "latest",
					"description": "Terragrunt version"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_TERRAFORM",
			"extensions": [
				"HashiCorp.terraform",
				"ms-azuretools.vscode-azureterraform"
			],
			"settings": { 
				"terraform.languageServer": {
					"enabled": true,
					"args": []
				},
				"azureTerraform.terminal": "integrated"
			},
			"include": [
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "git",
			"name": "Git (may require compilation)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "os-provided"],
					"default": "os-provided",
					"description": "Select or enter a Git version."
				},
				"ppa": {
					"type": "boolean",
					"default": true,
					"description": "Install from PPA if available"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_GIT",
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"Javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "git-lfs",
			"name": "Git Large File Support (LFS)",
			"options": {
				"version": {
					"type": "string",
					"enum": ["latest"],
					"default": "latest",
					"description": "Currently unused."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_GIT_LFS",
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"Javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "github-cli",
			"name": "GitHub CLI",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest"],
					"default": "latest",
					"description": "Select version of the GitHub CLI, if not latest."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_GITHUB_CLI",
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"Javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "azure-cli",
			"name": "Azure CLI",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest"],
					"default": "latest",
					"description": "Select or enter an Azure CLI version. (Available versions may vary by Linux distribution.)"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_AZURE_CLI",
			"extensions": [
				"ms-vscode.azurecli"
			],
			"include": [
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "sshd",
			"name": "SSH server",
			"options": {
				"version": {
					"type": "string",
					"enum": ["latest"],
					"default": "latest",
					"description": "Currently unused."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_SSH",
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "desktop-lite",
			"name": "Light-weight desktop (Fluxbox)",
			"options": {
				"version": {
					"type": "string",
					"enum": ["latest"],
					"default": "latest",
					"description": "Currently unused."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_DESKTOP_LITE",
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "homebrew",
			"name": "Homebrew",
			"options": {
				"version": {
					"type": "string",
					"enum": ["latest"],
					"default": "latest",
					"description": "Currently unused."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_HOMEBREW",
			"containerEnv": {
				"BREW_PREFIX": "/home/linuxbrew/.linuxbrew",
				"PATH": "${BREW_PREFIX}/sbin:${BREW_PREFIX}/bin:${PATH}"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "node",
			"name": "Node.js (via nvm) and yarn",
			"options": {
				"version": {
					"type": "string",
					"proposals": [ "lts", "latest", "16", "14", "12" ],
					"default": "lts",
					"description": "Select or enter a Node.js version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_NODE",
			"extensions": ["dbaeumer.vscode-eslint"],
			"containerEnv": {
				"NVM_DIR":"/usr/local/share/nvm",
				"NVM_SYMLINK_CURRENT": "true",
				"PATH": "${NVM_DIR}/current/bin:${PATH}"
			}, "include": [
				"azure-cli",
				"cpp",
				"php",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"powershell",
				"rust",
				"dart",
				"ubuntu",
				"debian",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "python",
			"name": "Python (may require compilation)",
			"options": {
				"version": {
					"type": "string",
					"enum": [ "latest", "os-provided", "3.9", "3.8", "3.7", "3.6" ],
					"default": "system",
					"description": "Select a Python version to install."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_PYTHON",
			"extensions": [
				"ms-python.python",
				"ms-python.vscode-pylance"
			],
			"containerEnv": {
				"PYTHON_PATH": "/usr/local/python",
				"PIPX_HOME": "/usr/local/py-utils",
				"PIPX_BIN_DIR": "/usr/local/py-utils/bin",
				"PATH":"${PYTHON_PATH}/bin:${PATH}:${PIPX_BIN_DIR}"
			},
			"settings": { 
				"python.pythonPath": "/usr/local/bin/python",
				"python.languageServer": "Pylance",
				"python.linting.enabled": true,
				"python.linting.pylintEnabled": true,
				"python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",
				"python.formatting.blackPath": "/usr/local/py-utils/bin/black",
				"python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",
				"python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
				"python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
				"python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
				"python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
				"python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
				"python.linting.pylintPath": "/usr/local/py-utils/bin/pylint"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"java-8",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres"
			]
		},
		{
			"id": "golang",
			"name": "Go",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "1.17", "1.16"],
					"default": "latest",
					"description": "Select or enter a Go version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_GOLANG",
			"extensions": ["golang.Go"],
			"containerEnv": {
				"GOPATH": "/go",
				"GOROOT": "/usr/local/go",
				"PATH": "${GOPATH}/bin:${GOROOT}/bin:${PATH}"
			},
			"capAdd": [ "SYS_PTRACE" ],
			"securityOpt": [ "seccomp=unconfined" ],
			"settings": {
				"go.toolsManagement.checkForUpdates": "local",
				"go.useLanguageServer": true,
				"go.gopath": "/go",
				"go.goroot": "/usr/local/go"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"java",
				"java-8",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "java",
			"name": "Java (via SDKMAN!)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["lts", "latest", "16", "11", "8"],
					"default": "lts",
					"description": "Select or enter a Java version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_JAVA",
			"extensions": ["vscjava.vscode-java-pack"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/java/current/bin:${PATH}"
			},
			"settings": {
				"java.home": "/extension-java-home",
				"java.import.gradle.java.home": "/usr/local/sdkman/candidates/java/current"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		// Problem #6 - Maven and gradle options should not be presented if Java isn't checked
		{
			"id": "maven",
			"name": "Maven (via SDKMAN!)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "3.8", "3.6", "3.5"],
					"default": "latest",
					"description": "Select or enter a Maven version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_MAVEN",
			"extensions": ["vscjava.vscode-java-pack"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/maven/current/bin:${PATH}"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "gradle",
			"name": "Gradle (via SDKMAN!)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "7", "6", "5"],
					"default": "latest",
					"description": "Select or enter a Gradle version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_GRADLE",
			"extensions": ["vscjava.vscode-java-pack"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/gradle/current/bin:${PATH}"
			}, "include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"go",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "ruby",
			"name": "Ruby (via rvm)",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "3.0", "2.7", "2.6"],
					"default": "latest",
					"description": "Select or enter a Ruby version to install"
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_RUBY",
			"extensions": [
				"rebornix.Ruby"
			],
			"containerEnv": {
				"GEM_PATH": "/usr/local/rvm/gems/default:/usr/local/rvm/gems/default@global",
				"GEM_HOME": "/usr/local/rvm/gems/default",
				"MY_RUBY_HOME": "/usr/local/rvm/rubies/default",
				"PATH": "/usr/local/rvm/gems/default/bin:/usr/local/rvm/gems/default@global/bin:/usr/local/rvm/rubies/default/bin:${PATH}"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"go",
				"java",
				"java-8",
				"php",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"python-3-postgres"
			]
		},
		{
			"id": "rust",
			"name": "Rust",
			"options": {
				"version": {
					"type": "string",
					"enum": ["latest"],
					"default": "latest",
					"description": "Currently unused."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_RUST",
			"extensions": [
				"vadimcn.vscode-lldb",
				"mutantdino.resourcemonitor",
				"matklad.rust-analyzer",
				"tamasfe.even-better-toml",
				"serayuzgur.crates"	
			],
			"containerEnv": {
				"CARGO_HOME": "/usr/local/cargo",
				"RUSTUP_HOME": "/usr/local/rustup",
				"PATH": "${CARGO_HOME}/bin:${RUSTUP_HOME}/bin:${PATH}"
			},
			"capAdd": [ "SYS_PTRACE" ],
			"securityOpt": ["seccomp=unconfined"],
			"settings": {
				"lldb.executable": "/usr/bin/lldb",
				"files.watcherExclude": {
					"**/target/**": true
				},
				"rust-analyzer.checkOnSave.command": "clippy"
			},
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"powershell",
				"go",
				"java",
				"java-8",
				"php",
				"ruby",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		},
		{
			"id": "powershell",
			"name": "PowerShell",
			"options": {
				"version": {
					"type": "string",
					"proposals": ["latest", "7.1"],
					"default": "latest",
					"description": "Select or enter a version of PowerShell."
				}
			},
			"init": true,
			"buildArg": "_VSC_INSTALL_POWERSHELL",
			"include": [
				"azure-cli",
				"cpp",
				"kubernetes-helm",
				"kubernetes-helm-minikube",
				"docker-from-docker",
				"docker-in-docker",
				"dotnet",
				"dotnet-fsharp",
				"go",
				"java",
				"java-8",
				"php",
				"ruby",
				"rust",
				"typescript-node",
				"javascript-node",
				"dart",
				"python-3",
				"ubuntu",
				"debian",
				"javascript-node-azurite",
				"javascript-node-mongo",
				"javascript-node-postgres",
				"php-mariadb",
				"ruby-rails",
				"ruby-rails-postgres",
				"python-3-postgres"
			]
		}
	]
}
 