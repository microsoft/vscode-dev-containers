{
	"name": "Elm (Community)",
	"dockerFile": "Dockerfile",

	// Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Add the IDs of extensions you want installed when the container is created.
			"extensions": [
				"Elmtooling.elm-ls-vscode"
			]
		}
	},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// 8000 is the default port used for the `elm reactor` command
	// "forwardPorts": [8000],

	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "elm make",

	// Comment out to connect as root instead. In that case you may need to change the mounts
	// configuration too. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "node",
	
	// Keeping the elm dependency cache mounted in a volume is both a small performance benefit
	// when having rebuilt your container. It also solves a problem with the Elm Language Server.
	// The Elm Language Server uses the dependency cache stored at ~/.elm.
	// However, the elm compiler uses elm-stuff in the mounted directory which keeps timestamps
	// telling the elm compiler whether elm.json changed since it last downloaded dependencies.
	// This data is persisted, but without a volume the ~/.elm dependency cache itself is not
	// persisted, resulting in a corruption of that relationship.
	// The Elm Language Server expects the elm compiler to keep ~/.elm up to date, but because
	// of this failure it will crash continuously when ~/.elm does not store the elm code for
	// the dependencies. This will usually occur every time the container has been rebuilt
	// and is manually fixed by deleting the elm-stuff directory which forces the compiler to
	// redownload dependencies.
	// Adding this volume will preserve the elm cache between rebuilds though, fixing this issue
	"mounts": [
		"source=vscode-devcontainer-elm-dependency-cache,target=/home/node/.elm,type=volume"
	]
}
